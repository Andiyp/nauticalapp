rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Optimized user document access - caches the user doc
    function getUserData() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }
    
    // Batch user checks to reduce reads
    function getUserStatus() {
      let userData = getUserData();
      return {
        'isAdmin': userData.role == 'admin',
        'isBlocked': userData.isBlocked
      };
    }

    // Users collection
    match /users/{userId} {
      // Optimize read operations by combining conditions
      allow read: if isAuthenticated() && (
        userId == request.auth.uid || 
        getUserData().role == 'admin'
      );
      
      allow create: if isAuthenticated() && userId == request.auth.uid;
      
      // Combine update conditions to reduce reads
      allow update: if isAuthenticated() && (
        userId == request.auth.uid && !getUserData().isBlocked ||
        getUserData().role == 'admin'
      );
      
      allow delete: if isAuthenticated() && getUserData().role == 'admin';
    }

    // SOS requests - optimize by reducing nested checks
    match /sos_requests/{requestId} {
      allow read: if isAuthenticated() && !getUserData().isBlocked;
      
      allow create: if isAuthenticated() && 
        !getUserData().isBlocked && 
        request.resource.data.userId == request.auth.uid;
      
      allow update, delete: if isAuthenticated() && getUserData().role == 'admin';
    }

    // Alerts collection - simplified rules
    match /alerts/{alertId} {
      allow read: if isAuthenticated() && !getUserData().isBlocked;
      allow write: if isAuthenticated() && getUserData().role == 'admin';
    }
  }
}